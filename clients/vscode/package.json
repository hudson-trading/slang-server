{
  "name": "vscode-slang",
  "displayName": "slang-server: Verilog/SystemVerilog LSP",
  "description": "Verilog and SystemVerilog support via the slang language server.",
  "version": "0.1.0",
  "publisher": "Hudson-River-Trading",
  "keywords": [
    "verilog",
    "system verilog",
    "systemverilog",
    "fpga",
    "slang"
  ],
  "homepage": "https://hudson-trading.github.io/slang-server",
  "repository": {
    "type": "git",
    "url": "https://github.com/hudson-trading/slang-server"
  },
  "bugs": {
    "url": "https://github.com/hudson-trading/slang-server/issues"
  },
  "engines": {
    "vscode": "^1.101.0"
  },
  "categories": [
    "Programming Languages",
    "Snippets",
    "Linters",
    "Formatters"
  ],
  "icon": "images/icon.png",
  "main": "./dist/extension.js",
  "activationEvents": [
    "workspaceContains:**/*.{v,sv,vh,svh}"
  ],
  "files": [
    "dist",
    "images",
    "languages",
    "resources",
    "LICENSE"
  ],
  "contributes": {
    "jsonValidation": [
      {
        "fileMatch": [
          ".slang/server.json",
          ".slang/local/server.json"
        ],
        "url": "./resources/config.schema.json"
      }
    ],
    "languages": [
      {
        "id": "verilog",
        "aliases": [
          "Verilog",
          "verilog"
        ],
        "extensions": [
          ".v",
          ".vl"
        ],
        "icon": {
          "light": "./resources/sv_light.svg",
          "dark": "./resources/sv_dark.svg"
        },
        "configuration": "./languages/verilog/verilog.configuration.json"
      },
      {
        "id": "verilogheader",
        "aliases": [
          "Verilog",
          "verilog"
        ],
        "extensions": [
          ".vh"
        ],
        "icon": {
          "light": "./resources/svh_light.svg",
          "dark": "./resources/svh_dark.svg"
        },
        "configuration": "./languages/verilog/verilog.configuration.json"
      },
      {
        "id": "systemverilog",
        "aliases": [
          "System Verilog",
          "systemverilog"
        ],
        "extensions": [
          ".sv"
        ],
        "configuration": "./languages/sv/systemverilog.configuration.json",
        "icon": {
          "light": "./resources/sv_light.svg",
          "dark": "./resources/sv_dark.svg"
        }
      },
      {
        "id": "systemverilogheader",
        "aliases": [
          "systemverilog"
        ],
        "extensions": [
          ".svh"
        ],
        "configuration": "./languages/sv/systemverilog.configuration.json",
        "icon": {
          "light": "./resources/svh_light.svg",
          "dark": "./resources/svh_dark.svg"
        }
      },
      {
        "id": "ucf",
        "aliases": [
          "vivado ucf",
          "ucf constraints"
        ],
        "extensions": [
          ".ucf"
        ],
        "configuration": "./languages/ucf/constraints.configuration.json"
      },
      {
        "id": "sdc",
        "aliases": [
          "Synopsys Design Constraints"
        ],
        "extensions": [
          ".sdc"
        ],
        "configuration": "./languages/sdc/sdc.configuration.json"
      },
      {
        "id": "tcl",
        "aliases": [
          "Tcl",
          "tcl"
        ],
        "extensions": [
          ".tcl",
          "tm",
          "tk"
        ],
        "configuration": "./languages/tcl/tcl.configuration.json"
      },
      {
        "id": "xdc",
        "aliases": [
          "Xilinx Design Constraints"
        ],
        "extensions": [
          ".xdc"
        ],
        "configuration": "./languages/xdc/sdc.configuration.json"
      },
      {
        "id": "dotf",
        "aliases": [
          "Verilog Filelist",
          "verilog-filelist",
          "dotf"
        ],
        "extensions": [
          ".f"
        ],
        "configuration": "./languages/dotf/dotf.configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "verilog",
        "scopeName": "source.verilog",
        "path": "./languages/verilog/verilog.tmLanguage.json"
      },
      {
        "language": "verilogheader",
        "scopeName": "source.systemverilog",
        "path": "./languages/verilog/verilog.tmLanguage.json"
      },
      {
        "language": "systemverilog",
        "scopeName": "source.systemverilog",
        "path": "./languages/sv/systemverilog.tmLanguage.json"
      },
      {
        "language": "systemverilogheader",
        "scopeName": "source.systemverilog",
        "path": "./languages/sv/systemverilog.tmLanguage.json"
      },
      {
        "language": "ucf",
        "scopeName": "source.ucfconstraints",
        "path": "./languages/ucf/ucf.tmLanguage.json"
      },
      {
        "language": "sdc",
        "scopeName": "source.sdc",
        "path": "./languages/sdc/sdc.tmLanguage.json"
      },
      {
        "language": "tcl",
        "scopeName": "source.tcl",
        "path": "./languages/tcl/tcl.tmlanguage.json"
      },
      {
        "language": "xdc",
        "scopeName": "source.sdc",
        "path": "./languages/sdc/sdc.tmLanguage.json"
      },
      {
        "scopeName": "markdown.systemverilog.codeblock",
        "path": "./languages/sv/markdownblock.json",
        "injectTo": [
          "text.html.markdown"
        ],
        "embeddedLanguages": {
          "meta.embedded.block.systemverilog": "source.systemverilog"
        }
      },
      {
        "scopeName": "markdown.verilog.codeblock",
        "path": "./languages/verilog/markdownblock.json",
        "injectTo": [
          "text.html.markdown"
        ],
        "embeddedLanguages": {
          "meta.embedded.block.verilog": "source.verilog"
        }
      },
      {
        "language": "dotf",
        "scopeName": "source.f",
        "path": "./languages/dotf/dotf.tmLanguage.json"
      }
    ],
    "snippets": [
      {
        "language": "verilog",
        "path": "./languages/verilog/verilog.snippets.json"
      },
      {
        "language": "systemverilog",
        "path": "./languages/verilog/verilog.snippets.json"
      },
      {
        "language": "systemverilog",
        "path": "./languages/sv/systemverilog.snippets.json"
      },
      {
        "language": "verilogheader",
        "path": "./languages/verilog/verilog.snippets.json"
      },
      {
        "language": "systemverilogheader",
        "path": "./languages/verilog/verilog.snippets.json"
      },
      {
        "language": "systemverilogheader",
        "path": "./languages/sv/systemverilog.snippets.json"
      }
    ],
    "configuration": {
      "title": "verilog configuration",
      "properties": {
        "slang.formatDirs": {
          "default": [],
          "description": "Directories to format",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "slang.svFormat.command": {
          "description": "Formatter Command. The file contents will be sent to stdin, and formatted code should be sent back on stdout. E.g. `path/to/verible-format --indentation_spaces=4 -",
          "default": "",
          "type": "string"
        },
        "slang.verilogFormat.command": {
          "description": "Formatter Command. The file contents will be sent to stdin, and formatted code should be sent back on stdout. E.g. `path/to/verible-format --indentation_spaces=4 -",
          "default": "",
          "type": "string"
        },
        "slang.rewriterPath": {
          "default": "",
          "description": "Rewriter command for macro expansion; e.g. `path/to/slang_rewriter --expand-macros`. This will shortly be part of the language server, and will not have to be set separately.",
          "type": "string"
        },
        "slang.path": {
          "description": "Path to the slang-server (not slang)",
          "default": "",
          "type": "string"
        },
        "slang.args": {
          "default": [],
          "description": "Arguments to pass to the slang-server. These are different from slang flags; for those open `.slang/server.json`",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "slang.debugArgs": {
          "default": [],
          "description": "Arguments to pass to slang-server when debugging",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "commands": [
      {
        "command": "slang.project.instancesView.copyHierarchyPath",
        "title": "Copy Path",
        "viewItems": [
          "Instance"
        ],
        "icon": "$(files)",
        "isSubmenu": true,
        "keybind": "cmd+c"
      },
      {
        "command": "slang.project.instancesView.showInWaveform",
        "title": "Show in Waveform",
        "viewItems": [
          "Instance"
        ],
        "icon": "$(graph-line)",
        "keybind": "w"
      },
      {
        "command": "slang.project.setTopLevel",
        "title": "Set Top Level",
        "shortTitle": "Set Top",
        "languages": [
          "verilog",
          "systemverilog"
        ],
        "icon": "$(chip)"
      },
      {
        "command": "slang.project.selectTopLevel",
        "title": "Slang: Select Top Level",
        "shortTitle": "Select Top"
      },
      {
        "command": "slang.project.clearTopLevel",
        "title": "Clear Top Level",
        "icon": "$(panel-close)"
      },
      {
        "command": "slang.project.fuzzyFindInstance",
        "title": "Fuzzy Find Instances",
        "icon": "$(search-view-icon)",
        "keybind": "cmd+f",
        "keybindContainer": true
      },
      {
        "command": "slang.project.setInstance",
        "title": "Slang: Select Instance"
      },
      {
        "command": "slang.project.showBuildFile",
        "title": "Slang: Open Build File",
        "icon": "$(file)",
        "shown": true
      },
      {
        "command": "slang.project.selectBuildFile",
        "title": "Slang: Select build file",
        "icon": "$(file-directory)",
        "shown": true
      },
      {
        "command": "slang.project.toggleParams",
        "title": "Toggle Params",
        "icon": "$(symbol-type-parameter)"
      },
      {
        "command": "slang.project.toggleData",
        "title": "Toggle Data",
        "icon": "$(symbol-variable)"
      },
      {
        "command": "slang.project.toggleHidden",
        "title": "Toggle Macro Defined",
        "icon": "$(eye)"
      },
      {
        "command": "slang.project.showSourceFile",
        "title": "Show Module",
        "viewItems": [
          "Module"
        ],
        "icon": {
          "light": "./resources/light/go-to-file.svg",
          "dark": "./resources/dark/go-to-file.svg"
        }
      },
      {
        "command": "slang.project.showInWaveform",
        "title": "Show in Waveform",
        "icon": "$(graph-line)",
        "keybind": "w"
      },
      {
        "command": "slang.project.showInEditorFromNetlist",
        "title": "Show in Editor",
        "icon": "$(file-code)",
        "viewOverride": "waveformViewerNetlistView",
        "keybind": "e"
      },
      {
        "command": "slang.project.showInEditorFromVaporview",
        "title": "Show in Editor",
        "icon": "$(file-code)",
        "group": "2_variables@2.1",
        "editorId": "vaporview.waveformViewer",
        "webviewSection": "signal",
        "keybind": "e"
      },
      {
        "command": "slang.project.copyHierarchyPath",
        "title": "Copy Path",
        "viewItems": [],
        "isSubmenu": true,
        "icon": {
          "light": "./resources/light/files.svg",
          "dark": "./resources/dark/files.svg"
        },
        "keybind": "cmd+c"
      },
      {
        "command": "slang.rewrite",
        "title": "Expand Macros",
        "shortTitle": "Expand macros",
        "languages": [
          "verilog",
          "systemverilog"
        ],
        "icon": "$(open-preview)"
      },
      {
        "command": "slang.restartLanguageServer",
        "title": "Slang: Restart Language Server"
      },
      {
        "command": "slang.showOutput",
        "title": "Slang: Show Output"
      },
      {
        "command": "slang.updateConfig",
        "title": "Extdev: update config (package.json and CONFIG.md)"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "slang",
          "title": "Slang",
          "icon": "$(chip)"
        }
      ],
      "panel": []
    },
    "views": {
      "slang": [
        {
          "id": "slang.project",
          "name": "Hierarchy"
        },
        {
          "id": "slang.project.instancesView",
          "name": "Modules"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "slang.project",
        "contents": "[Select Build File](command:slang.project.selectBuildFile)\n[Select Top Level](command:slang.project.selectTopLevel)"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "slang.project.clearTopLevel",
          "group": "navigation",
          "when": "view == slang.project"
        },
        {
          "command": "slang.project.fuzzyFindInstance",
          "group": "navigation",
          "when": "view == slang.project"
        },
        {
          "command": "slang.project.showBuildFile",
          "group": "navigation",
          "when": "view == slang.project"
        },
        {
          "command": "slang.project.selectBuildFile",
          "group": "navigation",
          "when": "view == slang.project"
        },
        {
          "command": "slang.project.toggleParams",
          "group": "navigation",
          "when": "view == slang.project"
        },
        {
          "command": "slang.project.toggleData",
          "group": "navigation",
          "when": "view == slang.project"
        },
        {
          "command": "slang.project.toggleHidden",
          "group": "navigation",
          "when": "view == slang.project"
        }
      ],
      "view/item/context": [
        {
          "command": "slang.project.showSourceFile",
          "group": "inline",
          "when": "view == slang.project && viewItem == Module"
        },
        {
          "command": "slang.project.showInWaveform",
          "group": "inline",
          "when": "view == slang.project"
        },
        {
          "command": "slang.project.showInEditorFromNetlist",
          "group": "inline",
          "when": "view == waveformViewerNetlistView"
        },
        {
          "command": "slang.project.copyHierarchyPath",
          "group": "submenu@4",
          "when": "view == slang.project"
        },
        {
          "command": "slang.project.instancesView.copyHierarchyPath",
          "group": "submenu@5",
          "when": "view == slang.project.instancesView && viewItem == Instance"
        },
        {
          "command": "slang.project.instancesView.showInWaveform",
          "group": "inline",
          "when": "view == slang.project.instancesView && viewItem == Instance"
        }
      ],
      "editor/title": [
        {
          "command": "slang.project.setTopLevel",
          "when": "resourceLangId == verilog || resourceLangId == systemverilog",
          "group": "navigation"
        },
        {
          "command": "slang.rewrite",
          "when": "resourceLangId == verilog || resourceLangId == systemverilog",
          "group": "navigation"
        }
      ],
      "webview/context": [
        {
          "command": "slang.project.showInEditorFromVaporview",
          "group": "2_variables@2.1",
          "when": "activeCustomEditorId == vaporview.waveformViewer && webviewSection == signal"
        }
      ]
    },
    "keybindings": [
      {
        "key": "ctrl+f",
        "command": "slang.project.fuzzyFindInstance",
        "when": "sideBarFocus && activeViewlet == workbench.view.extension.slang && !inputFocus",
        "mac": "cmd+f"
      },
      {
        "key": "w",
        "command": "slang.project.showInWaveform",
        "when": "focusedView == slang.project && !inputFocus"
      },
      {
        "key": "e",
        "command": "slang.project.showInEditorFromNetlist",
        "when": "focusedView == waveformViewerNetlistView && !inputFocus"
      },
      {
        "key": "e",
        "command": "slang.project.showInEditorFromVaporview",
        "when": "activeCustomEditorId == vaporview.waveformViewer && !inputFocus"
      },
      {
        "key": "ctrl+c",
        "command": "slang.project.copyHierarchyPath",
        "when": "focusedView == slang.project && !inputFocus",
        "mac": "cmd+c"
      },
      {
        "key": "ctrl+c",
        "command": "slang.project.instancesView.copyHierarchyPath",
        "when": "focusedView == slang.project.instancesView && !inputFocus",
        "mac": "cmd+c"
      },
      {
        "key": "w",
        "command": "slang.project.instancesView.showInWaveform",
        "when": "focusedView == slang.project.instancesView && !inputFocus"
      }
    ]
  },
  "scripts": {
    "clean": "rm -rf out dist .vscode-test",
    "clean:light": "rm -rf out dist .vscode-test/extensions .vscode-test/user-data",
    "package": "pnpm vsce package --no-dependencies",
    "gen-types": "pnpm -F slanglib gen-types",
    "check-types": "pnpm gen-types && tsc --noEmit",
    "check-deps": "depcheck --ignore-patterns 'out/node-packages'",
    "prepublishOnly": "pnpm check-types && pnpm check-deps && pnpm lint && pnpm format && pnpm package -o vscode-slang.vsix",
    "release:dry-run": "pnpm publish . --dry-run --no-git-checks",
    "release:latest": "pnpm publish .",
    "release:insiders": "pnpm publish . --tag=insiders",
    "release:alpha": "pnpm publish . --tag=alpha --no-git-checks",
    "esbuild-base": "esbuild ./src/extension.ts --bundle --external:vscode --format=cjs --platform=node --outfile=dist/extension.js --main-fields=module,main",
    "vscode:prepublish": "pnpm esbuild-base --minify",
    "build": "pnpm esbuild-base --sourcemap",
    "watch": "pnpm esbuild-base --sourcemap --watch",
    "build-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "prerelease:alpha": "ts-node scripts/update-alpha-version.ts",
    "lint:ts": "eslint src --ext ts --fix",
    "lint": "pnpm lint:ts",
    "pretest": "pnpm clean:light && pnpm build-tests && pnpm build && pnpm lint",
    "syntax": "js-yaml ./languages/sv/systemverilog.tmLanguage.yaml > ./languages/sv/systemverilog.tmLanguage.json",
    "genconfig": "../../build/bin/slang-server --config-schema > resources/config.schema.json && npx json2ts -i resources/config.schema.json -o src/config.gen.ts"
  },
  "dependencies": {
    "js-yaml": "^4.1.0",
    "semver": "^7.7.3",
    "vscode-languageclient": "^9.0.1",
    "which": "^4.0.0"
  },
  "devDependencies": {
    "@types/glob": "^8.1.0",
    "@types/node": "~20.11.30",
    "@types/semver": "^7.7.1",
    "@types/vscode": "^1.101.0",
    "@types/which": "^3.0.3",
    "@typescript-eslint/eslint-plugin": "^8.21.0",
    "@typescript-eslint/parser": "^8.21.0",
    "@vscode/vsce": "^3.6.2",
    "depcheck": "^1.4.7",
    "esbuild": "^0.25.11",
    "eslint": "^9.18.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-unused-imports": "^4.2.0",
    "glob": "^11.0.0",
    "jiti": "^2.6.1",
    "json-schema-to-typescript": "^15.0.4",
    "prettier-plugin-organize-imports": "^4.1.0",
    "ts-node": "^10.9.2",
    "typescript": "^5.4.3"
  },
  "__metadata": {
    "id": "feb7e3b5-7d35-4f95-a3d2-61eeaa12efa5",
    "publisherDisplayName": "AndrewNolte",
    "publisherId": "fcf32c99-a624-437b-9f47-9333ea128623"
  }
}
